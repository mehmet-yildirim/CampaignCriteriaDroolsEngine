package com.payflex.campaignCriteria.drlGenerator;

import java.util.List;
import java.util.HashMap;

import tr.com.innova.payflex.campaignCriteria.drlGenerator.helpers.*;
import tr.com.innova.payflex.campaignCriteria.drlGenerator.entity.*;

//CampaignName : Scenario3

rule "Campaign(3)-Rule1-Sec1(Init)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.NewEventReceived)
	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.DroolsCampaignEventValidated);
		update($event);
end

rule "Campaign(3)-Rule1-Sec2(EndUser)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.DroolsCampaignEventValidated)
		eval
		(
			 DroolsDateHelper.firstIsRelativelyBeforeTimestamp($event.getEndUserField("EnrollmentDate"),"6-M", $event.getValue("Timestamp"))
		)
	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.EndUserCriteriasAreSatisfied);
		update($event);
end

rule "Campaign(3)-Rule1-Sec3(CurrentEvent)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.EndUserCriteriasAreSatisfied)
		eval
		(
			 DroolsHelper.firstArrayContainsSecond("1",$event.getCurrentEventField("Location")) && 
			 $event.getCurrentEventField("Amount") != null && (double)$event.getCurrentEventField("Amount") > 25
		)
	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.CurrentEventCriteriasAreSatisfied);
		update($event);
end

rule "Campaign(3)-Rule1-Sec4(PastEvents)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.CurrentEventCriteriasAreSatisfied)

		$pastEvents0 : List(size>= 0 && size<=0)
				from collect(HashMap(
					DroolsHelper.firstArrayContainsSecond("1",get("Location"))
				)
				from $event.getPastEvents)

	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.PastEventsCriteriasAreSatisfied);
		update($event);
end

rule "Campaign(3)-Rule1-Sec5(PastBenefits)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.PastEventsCriteriasAreSatisfied)
	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.PastBenefitsCriteriasAreSatisfied);
		update($event);
end

rule "Campaign(3)-Rule1-Sec6(BenefitLimit)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.PastBenefitsCriteriasAreSatisfied)

		$benetifLimit : List(size<1)
				from collect(HashMap(
					get("CampaignId")=="3"
				)
				from $event.getPastBenefits())
	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.BenefitLimitCriteriasAreSatisfied);
		update($event);
end

rule "Campaign(3)-Rule1-Sec7(Recurrence)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.BenefitLimitCriteriasAreSatisfied)
	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.RecurrenceCriteriasAreSatisfied);
		update($event);
end

rule "Campaign(3)-Rule1-Sec8(Final)"
	when
		$event : DroolsCampaignEvent(getDroolsCampaignAuditByRuleNo(1) == DroolsCampaignAudit.RecurrenceCriteriasAreSatisfied)
	then
		$event.updateDroolsCampaignAuditByRuleNo(1, DroolsCampaignAudit.AllRuleCriteriasAreSatisfied);
		update($event);
		$event.addDroolsCampaignMatch("3","1","1");
end